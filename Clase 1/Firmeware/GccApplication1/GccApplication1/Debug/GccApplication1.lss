
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b5  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a0  00000000  00000000  00000af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037a  00000000  00000000  00001191  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000150c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b5  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f8  00000000  00000000  000018f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001aed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  78:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ports_init>:
//--funciones

int ports_init (void)
{
	//76543210
	DDRD  =0b00111100; //declaro salidas de los pins 2 a 5 del registro D
  80:	8c e3       	ldi	r24, 0x3C	; 60
  82:	8a b9       	out	0x0a, r24	; 10
	DDRB  =0b00000001; // declaro salida al pin 0 del registro B
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	84 b9       	out	0x04, r24	; 4
	
}
  88:	08 95       	ret

0000008a <main>:

int main (void)
{
	ports_init();  // se manda llamar la funcio de inicializacion de puertos
  8a:	0e 94 40 00 	call	0x80	; 0x80 <ports_init>
	while(1)
	{
		// 8421 8421
		//Ob0000_0000;
		PORTD = (1<<2);// prender el led 1 en binario 0b00000100 lo cambiamos con los operadores de desplazamiento 
  8e:	84 e0       	ldi	r24, 0x04	; 4
  90:	8b b9       	out	0x0b, r24	; 11
		PORTB =0x00; // decirle que mientras d esta prendido b esta apagado
  92:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f e3       	ldi	r18, 0x3F	; 63
  96:	3d e0       	ldi	r19, 0x0D	; 13
  98:	43 e0       	ldi	r20, 0x03	; 3
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	30 40       	sbci	r19, 0x00	; 0
  9e:	40 40       	sbci	r20, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x10>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x1a>
  a4:	00 00       	nop
		_delay_ms(TIEMPO);// es para el retardo  en milisegundos
		PORTD = (1<<3);// prender el led 1 en binario 0b00001000 lo cambiamos con los operadores de desplazamiento 
  a6:	88 e0       	ldi	r24, 0x08	; 8
  a8:	8b b9       	out	0x0b, r24	; 11
		PORTB =0x00; // decirle que mientras d esta prendido b esta apagado
  aa:	15 b8       	out	0x05, r1	; 5
  ac:	5f e3       	ldi	r21, 0x3F	; 63
  ae:	9d e0       	ldi	r25, 0x0D	; 13
  b0:	23 e0       	ldi	r18, 0x03	; 3
  b2:	51 50       	subi	r21, 0x01	; 1
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	20 40       	sbci	r18, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x28>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x32>
  bc:	00 00       	nop
		_delay_ms(TIEMPO);//retardo  1 segundo
		PORTD = (1<<4);// prender el led 1 en binario 0b00010000 lo cambiamos con los operadores de desplazamiento 
  be:	90 e1       	ldi	r25, 0x10	; 16
  c0:	9b b9       	out	0x0b, r25	; 11
		PORTB =0x00; // decirle que mientras d esta prendido b esta apagado
  c2:	15 b8       	out	0x05, r1	; 5
  c4:	3f e3       	ldi	r19, 0x3F	; 63
  c6:	4d e0       	ldi	r20, 0x0D	; 13
  c8:	53 e0       	ldi	r21, 0x03	; 3
  ca:	31 50       	subi	r19, 0x01	; 1
  cc:	40 40       	sbci	r20, 0x00	; 0
  ce:	50 40       	sbci	r21, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x40>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x4a>
  d4:	00 00       	nop
		_delay_ms(TIEMPO);//retardo  1 segundo
		PORTD = (1<<5);// prender el led 1 en binario 0b00100000 lo cambiamos con los operadores de desplazamiento 
  d6:	20 e2       	ldi	r18, 0x20	; 32
  d8:	2b b9       	out	0x0b, r18	; 11
		PORTB =0x00; // decirle que mientras d esta prendido b esta apagado
  da:	15 b8       	out	0x05, r1	; 5
  dc:	3f e3       	ldi	r19, 0x3F	; 63
  de:	4d e0       	ldi	r20, 0x0D	; 13
  e0:	53 e0       	ldi	r21, 0x03	; 3
  e2:	31 50       	subi	r19, 0x01	; 1
  e4:	40 40       	sbci	r20, 0x00	; 0
  e6:	50 40       	sbci	r21, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x58>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x62>
  ec:	00 00       	nop
		_delay_ms(TIEMPO);//retardo  1 segundo
		PORTD =0X00;//apagar el puerto d cuando se prenda puer b
  ee:	1b b8       	out	0x0b, r1	; 11
		PORTB =0x01;// prender  el led 5
  f0:	31 e0       	ldi	r19, 0x01	; 1
  f2:	35 b9       	out	0x05, r19	; 5
  f4:	3f e3       	ldi	r19, 0x3F	; 63
  f6:	4d e0       	ldi	r20, 0x0D	; 13
  f8:	53 e0       	ldi	r21, 0x03	; 3
  fa:	31 50       	subi	r19, 0x01	; 1
  fc:	40 40       	sbci	r20, 0x00	; 0
  fe:	50 40       	sbci	r21, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x70>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x7a>
 104:	00 00       	nop
		_delay_ms(TIEMPO);//retardo  1 segundo
		PORTD =0b00100000;// regreso del led 4
 106:	2b b9       	out	0x0b, r18	; 11
		PORTB =0x00; // decirle que mientras d esta prendido b esta apagado
 108:	15 b8       	out	0x05, r1	; 5
 10a:	2f e3       	ldi	r18, 0x3F	; 63
 10c:	3d e0       	ldi	r19, 0x0D	; 13
 10e:	43 e0       	ldi	r20, 0x03	; 3
 110:	21 50       	subi	r18, 0x01	; 1
 112:	30 40       	sbci	r19, 0x00	; 0
 114:	40 40       	sbci	r20, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x86>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x90>
 11a:	00 00       	nop
		_delay_ms(TIEMPO);//retardo  1 segundo
		PORTD =0b00010000;// regreso del led 3
 11c:	9b b9       	out	0x0b, r25	; 11
		PORTB =0x00;
 11e:	15 b8       	out	0x05, r1	; 5
 120:	5f e3       	ldi	r21, 0x3F	; 63
 122:	9d e0       	ldi	r25, 0x0D	; 13
 124:	23 e0       	ldi	r18, 0x03	; 3
 126:	51 50       	subi	r21, 0x01	; 1
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	20 40       	sbci	r18, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x9c>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0xa6>
 130:	00 00       	nop
		_delay_ms(TIEMPO);//retardo  1 segundo
		PORTD =0b00001000;// regresol del led 2
 132:	8b b9       	out	0x0b, r24	; 11
		PORTB =0x00; // decirle que mientras d esta prendido b esta apagado
 134:	15 b8       	out	0x05, r1	; 5
 136:	3f e3       	ldi	r19, 0x3F	; 63
 138:	4d e0       	ldi	r20, 0x0D	; 13
 13a:	53 e0       	ldi	r21, 0x03	; 3
 13c:	31 50       	subi	r19, 0x01	; 1
 13e:	40 40       	sbci	r20, 0x00	; 0
 140:	50 40       	sbci	r21, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0xb2>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0xbc>
 146:	00 00       	nop
 148:	a2 cf       	rjmp	.-188    	; 0x8e <main+0x4>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
