
Clase 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000083f  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069e  00000000  00000000  00000a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ea  00000000  00000000  000010d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a5  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  0000179d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001905  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 43 00 	call	0x86	; 0x86 <main>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ports_init>:
//--funciones

void ports_init (void)
{
	             //76543210
	LEDS_DDRX  =0b00111100; //declaro salidas de los pins 2 a 5 del registro D
  80:	8c e3       	ldi	r24, 0x3C	; 60
  82:	84 b9       	out	0x04, r24	; 4
  84:	08 95       	ret

00000086 <main>:
	
}

int main (void)
{
	ports_init();  // se manda llamar la funcio de inicializacion de puertos
  86:	0e 94 40 00 	call	0x80	; 0x80 <ports_init>
	while(1)
	{
		// 8421 8421
		//Ob0000_0000;
		LEDS_PORTX = (1<<LED_0);// prender el led 1 en binario 0b00000100 lo cambiamos con los operadores de desplazamiento (1<<2) y volvemos a cambiar ahora con etiquetas y nos queda (1<<LED_0)
  8a:	84 e0       	ldi	r24, 0x04	; 4
  8c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	39 e6       	ldi	r19, 0x69	; 105
  92:	48 e1       	ldi	r20, 0x18	; 24
  94:	21 50       	subi	r18, 0x01	; 1
  96:	30 40       	sbci	r19, 0x00	; 0
  98:	40 40       	sbci	r20, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0xe>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x18>
  9e:	00 00       	nop
		_delay_ms(TIEMPO);// es para el retardo  en milisegundos
		LEDS_PORTX = (1<<LED_1);// 
  a0:	88 e0       	ldi	r24, 0x08	; 8
  a2:	85 b9       	out	0x05, r24	; 5
  a4:	9f ef       	ldi	r25, 0xFF	; 255
  a6:	29 e6       	ldi	r18, 0x69	; 105
  a8:	38 e1       	ldi	r19, 0x18	; 24
  aa:	91 50       	subi	r25, 0x01	; 1
  ac:	20 40       	sbci	r18, 0x00	; 0
  ae:	30 40       	sbci	r19, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x24>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x2e>
  b4:	00 00       	nop
		_delay_ms(TIEMPO);//retardo  1 segundo
		LEDS_PORTX = (1<<LED_2);//  
  b6:	90 e1       	ldi	r25, 0x10	; 16
  b8:	95 b9       	out	0x05, r25	; 5
  ba:	4f ef       	ldi	r20, 0xFF	; 255
  bc:	29 e6       	ldi	r18, 0x69	; 105
  be:	38 e1       	ldi	r19, 0x18	; 24
  c0:	41 50       	subi	r20, 0x01	; 1
  c2:	20 40       	sbci	r18, 0x00	; 0
  c4:	30 40       	sbci	r19, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x3a>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x44>
  ca:	00 00       	nop
		_delay_ms(TIEMPO);//retardo  1 segundo
		LEDS_PORTX = (1<<LED_3);// o 
  cc:	20 e2       	ldi	r18, 0x20	; 32
  ce:	25 b9       	out	0x05, r18	; 5
  d0:	4f ef       	ldi	r20, 0xFF	; 255
  d2:	29 e6       	ldi	r18, 0x69	; 105
  d4:	38 e1       	ldi	r19, 0x18	; 24
  d6:	41 50       	subi	r20, 0x01	; 1
  d8:	20 40       	sbci	r18, 0x00	; 0
  da:	30 40       	sbci	r19, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x50>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x5a>
  e0:	00 00       	nop
		_delay_ms(TIEMPO);//retardo  1 segundo
		LEDS_PORTX = (1<<LED_2);//regreso del led 4
  e2:	95 b9       	out	0x05, r25	; 5
  e4:	4f ef       	ldi	r20, 0xFF	; 255
  e6:	99 e6       	ldi	r25, 0x69	; 105
  e8:	28 e1       	ldi	r18, 0x18	; 24
  ea:	41 50       	subi	r20, 0x01	; 1
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	20 40       	sbci	r18, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x64>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x6e>
  f4:	00 00       	nop
		_delay_ms(TIEMPO);//retardo  1 segundo
		LEDS_PORTX =(1<<LED_1);// regreso del led 3
  f6:	85 b9       	out	0x05, r24	; 5
  f8:	3f ef       	ldi	r19, 0xFF	; 255
  fa:	49 e6       	ldi	r20, 0x69	; 105
  fc:	88 e1       	ldi	r24, 0x18	; 24
  fe:	31 50       	subi	r19, 0x01	; 1
 100:	40 40       	sbci	r20, 0x00	; 0
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x78>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x82>
 108:	00 00       	nop
 10a:	bf cf       	rjmp	.-130    	; 0x8a <main+0x4>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
