
clase 3.2 mascaras.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000146  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ad  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ae  00000000  00000000  00000a11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fa  00000000  00000000  000010bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000013bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e3  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000017f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001883  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  8e:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ports_init>:

//________________ Funciones______________________________________
void ports_init (void)
{
	//76543210
	LEDS_DDRX  =0b00111100; //declaro salidas de los pins 2 a 5 del registro D
  96:	8c e3       	ldi	r24, 0x3C	; 60
  98:	84 b9       	out	0x04, r24	; 4
	LEDS_DDRX = LEDS_DDRX | 0b00000100;
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	84 60       	ori	r24, 0x04	; 4
  9e:	84 b9       	out	0x04, r24	; 4
	//      0bxxxxx1xx | 0b00000100 es el resultado  en este caso no afecta  ya el unico bit  no se modifico
	LEDS_DDRX = LEDS_DDRX | (1<< LED_1);// Esto para hacer mas corto el codigo en lugar de binario
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	84 b9       	out	0x04, r24	; 4
	LEDS_DDRX |= (1<< LED_2); // para hacerlo mas corto que el anterio podemos usar esto (aqui cambiamos de led)
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	84 b9       	out	0x04, r24	; 4
	LEDS_DDRX |= _BV(LED_3); // esta opcion es lo mismo que las anteriores pero usando un macro definido _BV y es mas corto el codigo
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	80 62       	ori	r24, 0x20	; 32
  b0:	84 b9       	out	0x04, r24	; 4
  b2:	08 95       	ret

000000b4 <leds_ida>:
}

void leds_ida(void)
{
	i=2;
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	while(i<=5) // que el bucle se repita  hasta que la variable se menor o igual a 5
  ba:	18 c0       	rjmp	.+48     	; 0xec <leds_ida+0x38>
	{
		LEDS_PORTX |= (1<<i);// la etiqueta del puerto se indica que esta high 1 lugar
  bc:	35 b1       	in	r19, 0x05	; 5
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <leds_ida+0x14>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	2a 95       	dec	r18
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <leds_ida+0x10>
  cc:	83 2b       	or	r24, r19
  ce:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	81 ee       	ldi	r24, 0xE1	; 225
  d4:	94 e0       	ldi	r25, 0x04	; 4
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <leds_ida+0x22>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <leds_ida+0x2c>
  e0:	00 00       	nop
		_delay_ms(TIEMPO);// es para el retardo  en milisegundos
		i++; // incrementamos una i por cada iteracion del while
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}

void leds_ida(void)
{
	i=2;
	while(i<=5) // que el bucle se repita  hasta que la variable se menor o igual a 5
  ec:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f0:	26 30       	cpi	r18, 0x06	; 6
  f2:	20 f3       	brcs	.-56     	; 0xbc <leds_ida+0x8>
	{
		LEDS_PORTX |= (1<<i);// la etiqueta del puerto se indica que esta high 1 lugar
		_delay_ms(TIEMPO);// es para el retardo  en milisegundos
		i++; // incrementamos una i por cada iteracion del while
	}
}
  f4:	08 95       	ret

000000f6 <leds_vuelta>:


void leds_vuelta (void)
{
	while(i>=2) // Este es el bucle de regreso
  f6:	19 c0       	rjmp	.+50     	; 0x12a <leds_vuelta+0x34>
	{
		LEDS_PORTX &= ~(1<<i);// la etiqueta del puerto se indica que esta high 1 lugar
  f8:	25 b1       	in	r18, 0x05	; 5
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <leds_vuelta+0xe>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	3a 95       	dec	r19
 106:	e2 f7       	brpl	.-8      	; 0x100 <leds_vuelta+0xa>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	81 ee       	ldi	r24, 0xE1	; 225
 112:	94 e0       	ldi	r25, 0x04	; 4
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <leds_vuelta+0x1e>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <leds_vuelta+0x28>
 11e:	00 00       	nop
		_delay_ms(TIEMPO);// es para el retardo  en milisegundos
		i--; // disminuyendo  una i por cada iteracion del while
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 124:	81 50       	subi	r24, 0x01	; 1
 126:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}


void leds_vuelta (void)
{
	while(i>=2) // Este es el bucle de regreso
 12a:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12e:	32 30       	cpi	r19, 0x02	; 2
 130:	18 f7       	brcc	.-58     	; 0xf8 <leds_vuelta+0x2>
	{
		LEDS_PORTX &= ~(1<<i);// la etiqueta del puerto se indica que esta high 1 lugar
		_delay_ms(TIEMPO);// es para el retardo  en milisegundos
		i--; // disminuyendo  una i por cada iteracion del while
	}
 132:	08 95       	ret

00000134 <main>:

//______________MAIN_________________________________________________________

int main (void)
{
	ports_init();  // se manda llamar la funcio de inicializacion de puertos
 134:	0e 94 4b 00 	call	0x96	; 0x96 <ports_init>
	while(1)
	{
		leds_ida();// se manda llamar las funciones de prender los led de ida
 138:	0e 94 5a 00 	call	0xb4	; 0xb4 <leds_ida>
		leds_vuelta();	// se manda llamar la funcio de regreso
 13c:	0e 94 7b 00 	call	0xf6	; 0xf6 <leds_vuelta>
 140:	fb cf       	rjmp	.-10     	; 0x138 <main+0x4>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
