
clase 3.3 funciones y variables.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000126  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007db  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bd  00000000  00000000  000009ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000318  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000013d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ea  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ce  00000000  00000000  00001812  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  8e:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ports_init>:

//________________ Funciones______________________________________
void ports_init (void)
{
	//76543210
	LEDS_DDRX  =0b00111100; //declaro salidas de los pins 2 a 5 del registro D
  96:	8c e3       	ldi	r24, 0x3C	; 60
  98:	84 b9       	out	0x04, r24	; 4
	LEDS_DDRX = LEDS_DDRX | 0b00000100;
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	84 60       	ori	r24, 0x04	; 4
  9e:	84 b9       	out	0x04, r24	; 4
	//      0bxxxxx1xx | 0b00000100 es el resultado  en este caso no afecta  ya el unico bit  no se modifico
	LEDS_DDRX = LEDS_DDRX | (1<< LED_1);// Esto para hacer mas corto el codigo en lugar de binario
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	84 b9       	out	0x04, r24	; 4
	LEDS_DDRX |= (1<< LED_2); // para hacerlo mas corto que el anterio podemos usar esto (aqui cambiamos de led)
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	84 b9       	out	0x04, r24	; 4
	LEDS_DDRX |= _BV(LED_3); // esta opcion es lo mismo que las anteriores pero usando un macro definido _BV y es mas corto el codigo
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	80 62       	ori	r24, 0x20	; 32
  b0:	84 b9       	out	0x04, r24	; 4
  b2:	08 95       	ret

000000b4 <leds_ida>:
}

void leds_ida(void)
{
	for (uint8_t i = 2;i<=5;i++)
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	13 c0       	rjmp	.+38     	; 0xde <leds_ida+0x2a>
	{
		LEDS_PORTX = (1<<i);// la etiqueta del puerto se indica que esta high 1 lugar
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	08 2e       	mov	r0, r24
  be:	02 c0       	rjmp	.+4      	; 0xc4 <leds_ida+0x10>
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	0a 94       	dec	r0
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <leds_ida+0xc>
  c8:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	31 ee       	ldi	r19, 0xE1	; 225
  ce:	94 e0       	ldi	r25, 0x04	; 4
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	30 40       	sbci	r19, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <leds_ida+0x1c>
  d8:	00 c0       	rjmp	.+0      	; 0xda <leds_ida+0x26>
  da:	00 00       	nop
	LEDS_DDRX |= _BV(LED_3); // esta opcion es lo mismo que las anteriores pero usando un macro definido _BV y es mas corto el codigo
}

void leds_ida(void)
{
	for (uint8_t i = 2;i<=5;i++)
  dc:	8f 5f       	subi	r24, 0xFF	; 255
  de:	86 30       	cpi	r24, 0x06	; 6
  e0:	58 f3       	brcs	.-42     	; 0xb8 <leds_ida+0x4>
	{
		LEDS_PORTX = (1<<i);// la etiqueta del puerto se indica que esta high 1 lugar
		_delay_ms(TIEMPO);// es para el retardo  en milisegundos
	}
}
  e2:	08 95       	ret

000000e4 <leds_vuelta>:


void leds_vuelta (void)
{
	for (uint8_t i = 5;i>=2;i--)
  e4:	85 e0       	ldi	r24, 0x05	; 5
  e6:	13 c0       	rjmp	.+38     	; 0x10e <leds_vuelta+0x2a>
	{
		LEDS_PORTX = (1<<i);// la etiqueta del puerto se indica que esta high 1 lugar
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	08 2e       	mov	r0, r24
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <leds_vuelta+0x10>
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	0a 94       	dec	r0
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <leds_vuelta+0xc>
  f8:	25 b9       	out	0x05, r18	; 5
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	31 ee       	ldi	r19, 0xE1	; 225
  fe:	94 e0       	ldi	r25, 0x04	; 4
 100:	21 50       	subi	r18, 0x01	; 1
 102:	30 40       	sbci	r19, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <leds_vuelta+0x1c>
 108:	00 c0       	rjmp	.+0      	; 0x10a <leds_vuelta+0x26>
 10a:	00 00       	nop
}


void leds_vuelta (void)
{
	for (uint8_t i = 5;i>=2;i--)
 10c:	81 50       	subi	r24, 0x01	; 1
 10e:	82 30       	cpi	r24, 0x02	; 2
 110:	58 f7       	brcc	.-42     	; 0xe8 <leds_vuelta+0x4>
	{
		LEDS_PORTX = (1<<i);// la etiqueta del puerto se indica que esta high 1 lugar
		_delay_ms(TIEMPO);// es para el retardo  en milisegundos
	}
 112:	08 95       	ret

00000114 <main>:

//______________MAIN_________________________________________________________

int main (void)
{
	ports_init();  // se manda llamar la funcio de inicializacion de puertos
 114:	0e 94 4b 00 	call	0x96	; 0x96 <ports_init>
	while(1)
	{
		leds_ida();// se manda llamar las funciones de prender los led de ida
 118:	0e 94 5a 00 	call	0xb4	; 0xb4 <leds_ida>
		leds_vuelta();	// se manda llamar la funcio de regreso
 11c:	0e 94 72 00 	call	0xe4	; 0xe4 <leds_vuelta>
 120:	fb cf       	rjmp	.-10     	; 0x118 <main+0x4>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
