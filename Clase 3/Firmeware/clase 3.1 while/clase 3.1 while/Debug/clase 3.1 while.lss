
clase 3.1 while.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000766  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000692  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b1  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b5  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000af  00000000  00000000  0000168d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ports_init>:
//--funciones

void ports_init (void)
{
	            //76543210
	LEDS_DDRX  =0b00111100; //declaro salidas de los pins 2 a 5 del registro D
  80:	8c e3       	ldi	r24, 0x3C	; 60
  82:	84 b9       	out	0x04, r24	; 4
	      //    0bxxxxx1xx | 0b00000100  es es lo que le pedimos que cambie (or)
	LEDS_DDRX = LEDS_DDRX | 0b00000100;
  84:	84 b1       	in	r24, 0x04	; 4
  86:	84 60       	ori	r24, 0x04	; 4
  88:	84 b9       	out	0x04, r24	; 4
	    //      0bxxxxx1xx | 0b00000100 es el resultado  en este caso no afecta  ya el unico bit  no se modifico
	LEDS_DDRX = LEDS_DDRX | (1<< LED_1);// Esto para hacer mas corto el codigo en lugar de binario
  8a:	84 b1       	in	r24, 0x04	; 4
  8c:	88 60       	ori	r24, 0x08	; 8
  8e:	84 b9       	out	0x04, r24	; 4
	LEDS_DDRX |= (1<< LED_2); // para hacerlo mas corto que el anterio podemos usar esto (aqui cambiamos de led)
  90:	84 b1       	in	r24, 0x04	; 4
  92:	80 61       	ori	r24, 0x10	; 16
  94:	84 b9       	out	0x04, r24	; 4
	LEDS_DDRX |= (1<< LED_3);
  96:	84 b1       	in	r24, 0x04	; 4
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	84 b9       	out	0x04, r24	; 4
  9c:	08 95       	ret

0000009e <main>:
}

int main (void)
{
	ports_init();  // se manda llamar la funcio de inicializacion de puertos
  9e:	0e 94 40 00 	call	0x80	; 0x80 <ports_init>
	uint8_t i=2; // hacemos una variable de tipo entero y la inicializamoos en 2
	while(1)
	{
		i=2;
  a2:	22 e0       	ldi	r18, 0x02	; 2
		while(i<=5) // que el bucle se repita  hasta que la variable se menor o igual a 5 
  a4:	15 c0       	rjmp	.+42     	; 0xd0 <main+0x32>
		{
			LEDS_PORTX |= (1<<i);// la etiqueta del puerto se indica que esta high 1 lugar
  a6:	35 b1       	in	r19, 0x05	; 5
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 2e       	mov	r0, r18
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <main+0x16>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	0a 94       	dec	r0
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <main+0x12>
  b8:	83 2b       	or	r24, r19
  ba:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	3f ef       	ldi	r19, 0xFF	; 255
  be:	81 ee       	ldi	r24, 0xE1	; 225
  c0:	94 e0       	ldi	r25, 0x04	; 4
  c2:	31 50       	subi	r19, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x24>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x2e>
  cc:	00 00       	nop
			_delay_ms(TIEMPO);// es para el retardo  en milisegundos
			i++; // incrementamos una i por cada iteracion del while 
  ce:	2f 5f       	subi	r18, 0xFF	; 255
	ports_init();  // se manda llamar la funcio de inicializacion de puertos
	uint8_t i=2; // hacemos una variable de tipo entero y la inicializamoos en 2
	while(1)
	{
		i=2;
		while(i<=5) // que el bucle se repita  hasta que la variable se menor o igual a 5 
  d0:	26 30       	cpi	r18, 0x06	; 6
  d2:	48 f3       	brcs	.-46     	; 0xa6 <main+0x8>
  d4:	16 c0       	rjmp	.+44     	; 0x102 <main+0x64>
			_delay_ms(TIEMPO);// es para el retardo  en milisegundos
			i++; // incrementamos una i por cada iteracion del while 
		}
		while(i>=2) // Este es el bucle de regreso
		{
			LEDS_PORTX &= ~(1<<i);// la etiqueta del puerto se indica que esta high 1 lugar
  d6:	35 b1       	in	r19, 0x05	; 5
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 2e       	mov	r0, r18
  de:	02 c0       	rjmp	.+4      	; 0xe4 <main+0x46>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <main+0x42>
  e8:	80 95       	com	r24
  ea:	83 23       	and	r24, r19
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	3f ef       	ldi	r19, 0xFF	; 255
  f0:	81 ee       	ldi	r24, 0xE1	; 225
  f2:	94 e0       	ldi	r25, 0x04	; 4
  f4:	31 50       	subi	r19, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x56>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x60>
  fe:	00 00       	nop
			_delay_ms(TIEMPO);// es para el retardo  en milisegundos
			i--; // disminuyendo  una i por cada iteracion del while
 100:	21 50       	subi	r18, 0x01	; 1
		{
			LEDS_PORTX |= (1<<i);// la etiqueta del puerto se indica que esta high 1 lugar
			_delay_ms(TIEMPO);// es para el retardo  en milisegundos
			i++; // incrementamos una i por cada iteracion del while 
		}
		while(i>=2) // Este es el bucle de regreso
 102:	22 30       	cpi	r18, 0x02	; 2
 104:	40 f7       	brcc	.-48     	; 0xd6 <main+0x38>
 106:	cd cf       	rjmp	.-102    	; 0xa2 <main+0x4>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
